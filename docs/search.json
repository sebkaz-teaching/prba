[
  {
    "objectID": "lectures/plan.html",
    "href": "lectures/plan.html",
    "title": "Projektowanie Relacyjnych Baz Danych",
    "section": "",
    "text": "Wykład 1: Wprowadzenie do baz danych i model relacyjny • Historia i ewolucja baz danych • Podstawowe pojęcia: dane, informacja, baza danych, DBMS • Architektura systemów baz danych (ANSI/SPARC, poziomy abstrakcji) • Model relacyjny: relacje, krotki, atrybuty, domeny • Klucze (główny, obcy, kandydujące) i integralność danych\n⸻\nWykład 2: Projektowanie koncepcyjne – model ER (Entity-Relationship) • Analiza wymagań użytkownika • Diagramy encja-związek (ERD): encje, atrybuty, związki • Typy związków: 1:1, 1:N, N:M • Atrybuty proste, złożone, wielowartościowe • Ćwiczenia: tworzenie ERD dla prostego systemu\n⸻\nWykład 3: Od modelu ER do modelu relacyjnego • Reguły transformacji ERD na schemat relacyjny • Mapowanie encji i związków • Schemat relacyjny – projektowanie tabel • Ćwiczenia: przejście od ERD do relacji\n⸻\nWykład 4: Normalizacja baz danych • Redundancja i anomalia danych (wstawiania, modyfikacji, usuwania) • Klucze funkcyjne i zależności funkcyjne • Postacie normalne: 1NF, 2NF, 3NF, BCNF • Przykłady normalizacji i denormalizacji\n⸻\nWykład 5: Wprowadzenie do SQL – definicja danych (DDL) • Podstawowe elementy składni SQL • Tworzenie baz danych i tabel (CREATE DATABASE, CREATE TABLE) • Typy danych w SQL • Ograniczenia integralności (PRIMARY KEY, FOREIGN KEY, UNIQUE, CHECK, NOT NULL) • Modyfikacja schematu (ALTER TABLE, DROP TABLE)\n⸻\nWykład 6: SQL – manipulacja danymi (DML) • Wstawianie danych (INSERT) • Aktualizacja i usuwanie danych (UPDATE, DELETE) • Podstawowe zapytania (SELECT, FROM, WHERE) • Operatory logiczne i porównania • Operacje na zbiorach (UNION, INTERSECT, EXCEPT)\n⸻\nWykład 7: SQL – zapytania złożone i funkcje • Łączenia tabel (JOIN: INNER, LEFT, RIGHT, FULL) • Funkcje agregujące (COUNT, SUM, AVG, MIN, MAX) • Grupowanie i filtrowanie grup (GROUP BY, HAVING) • Podzapytania (subqueries) • Krótki wstęp do indeksów i wydajności zapytań"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Informacje ogólne",
    "section": "",
    "text": "Kod:\nSemestr: zimowy",
    "crumbs": [
      "Książki",
      "Informacje ogólne"
    ]
  },
  {
    "objectID": "index.html#projektowanie-relacyjnych-baz-danych",
    "href": "index.html#projektowanie-relacyjnych-baz-danych",
    "title": "Informacje ogólne",
    "section": "",
    "text": "Kod:\nSemestr: zimowy",
    "crumbs": [
      "Książki",
      "Informacje ogólne"
    ]
  },
  {
    "objectID": "index.html#kalendarz",
    "href": "index.html#kalendarz",
    "title": "Informacje ogólne",
    "section": "Kalendarz",
    "text": "Kalendarz\n\nWykład WEL21EA1S0:\n\n02.10.2025 Czwartek 8.00 - 9.30. b 61 s 104\n06.10.2025 Poniedziałek 8.00 - 9.30. b 61 s 104\n09.10.2025 Czwartek 8.00 - 9.30. b 61 s 104\n16.10.2025 Czwartek 8.00 - 9.30. b 61 s 104\n20.10.2025 Poniedziałek 9.50 - 11.25 b 61 s 104\n27.10.2025 Poniedziałek 9.50 - 11.25 b 61 s 104\n30.10.2025 Czwartek 8.00 - 9.30. b 61 s 104",
    "crumbs": [
      "Książki",
      "Informacje ogólne"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html",
    "href": "lectures/wyklad1.html",
    "title": "Wprowadzenie do relacyjnych baz danych",
    "section": "",
    "text": "Historia i ewolucja baz danych\nPodstawowe pojęcia: dane, informacja, baza danych, DBMS\nArchitektura systemów baz danych (ANSI/SPARC, poziomy abstrakcji)\nModel relacyjny: relacje, krotki, atrybuty, domeny\nKlucze (główny, obcy, kandydujące) i integralność danych",
    "crumbs": [
      "Książki",
      "Wykłady",
      "Wprowadzenie do relacyjnych baz danych"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#plan-wykładu",
    "href": "lectures/wyklad1.html#plan-wykładu",
    "title": "Wprowadzenie do relacyjnych baz danych",
    "section": "",
    "text": "Historia i ewolucja baz danych\nPodstawowe pojęcia: dane, informacja, baza danych, DBMS\nArchitektura systemów baz danych (ANSI/SPARC, poziomy abstrakcji)\nModel relacyjny: relacje, krotki, atrybuty, domeny\nKlucze (główny, obcy, kandydujące) i integralność danych",
    "crumbs": [
      "Książki",
      "Wykłady",
      "Wprowadzenie do relacyjnych baz danych"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#historia-i-ewolucja-baz-danych",
    "href": "lectures/wyklad1.html#historia-i-ewolucja-baz-danych",
    "title": "Wprowadzenie do relacyjnych baz danych",
    "section": "Historia i ewolucja baz danych",
    "text": "Historia i ewolucja baz danych\nBazy danych to nie jest wynalazek XXI wieku – ich historia sięga lat 60. XX wieku, kiedy pojawiła się potrzeba lepszego przechowywania i zarządzania coraz większą ilością informacji w firmach i instytucjach. Na początku istniały systemy plikowe, które pozwalały na zapisywanie danych w prostych plikach na dyskach.\nJednak te systemy miały wiele ograniczeń:\n\nBrak centralnej kontroli nad danymi – różne aplikacje musiały same zarządzać tymi samymi danymi.\nTrudność w utrzymaniu spójności danych – łatwo było wprowadzić błędy, np. zmienić dane w jednym pliku, a zapomnieć w drugim.\nOgraniczone możliwości wyszukiwania i przetwarzania danych – każde zapytanie wymagało pisania własnych procedur do przeszukiwania plików.\n\nW odpowiedzi na te problemy, w latach 60. i 70. zaczęły powstawać systemy zarządzania bazami danych (DBMS – Database Management Systems).\nDBMS to specjalne oprogramowanie, które pozwala przechowywać dane w sposób uporządkowany, zapewniając: - Centralną kontrolę nad danymi – wszystkie aplikacje korzystają z jednej, spójnej bazy. - Integralność danych – DBMS pilnuje, żeby dane były poprawne i spójne. - Wydajne wyszukiwanie i przetwarzanie – gotowe mechanizmy indeksowania i optymalizacji zapytań.\nWczesne DBMS były hierarchiczne i sieciowe, co oznaczało, że dane były przechowywane w strukturach przypominających drzewo lub graf.\nTakie podejście było skuteczne w pewnych zastosowaniach, ale było trudne w rozbudowie i modyfikacji.\nPrzełom nastąpił w latach 70., kiedy dr Edgar F. Codd zaproponował model relacyjny danych.\nW modelu relacyjnym wszystkie dane są przechowywane w tabelach (relacjach), które mają określone kolumny** (atrybuty) i wiersze (rekordy, krotki).\nZaletą tego podejścia jest: - Prostota i przejrzystość – dane są zorganizowane w logiczny sposób, łatwe do zrozumienia. - Elastyczność – nowe tabele można dodawać bez reorganizacji całej bazy. - Bezpieczeństwo i spójność – DBMS może wymuszać reguły integralności danych.\nOd tego czasu systemy relacyjne stały się standardem w branży, a język SQL (Structured Query Language), opracowany w latach 70. i 80., pozwala na łatwe tworzenie, modyfikowanie i pobieranie danych w bazach relacyjnych.\nSQL jest najczęściej stosowanym językiem związanym z bazami danych. Niezależnie od tego, czy zajmujesz się programowaniem, tworzeniem stron WWW, administracją baz danych, tworzeniem aplikacji mobilnych czy po prostu często korzystasz z pewnych funkcji pakietów biurowych, dobra znajomość tego języka może pomóc Ci w wydajnym wykorzystaniu baz danych.\nDzisiaj bazy danych są wszędzie – w bankach, sklepach internetowych, aplikacjach mobilnych, serwisach społecznościowych. Choć pojawiają się też nowe podejścia, takie jak bazy NoSQL czy grafowe, model relacyjny pozostaje fundamentem większości systemów baz danych na świecie.",
    "crumbs": [
      "Książki",
      "Wykłady",
      "Wprowadzenie do relacyjnych baz danych"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#dane-informacja-baza-danych-dbms",
    "href": "lectures/wyklad1.html#dane-informacja-baza-danych-dbms",
    "title": "Wprowadzenie do relacyjnych baz danych",
    "section": "Dane, informacja, baza danych, DBMS",
    "text": "Dane, informacja, baza danych, DBMS\nZanim zagłębimy się w projektowanie i SQL, warto zrozumieć kilka podstawowych pojęć, które są fundamentem całej dziedziny baz danych.\n\nDane vs. Informacja\n\nCzęsto słowa „dane” i „informacja” są używane zamiennie, ale w kontekście baz danych mają różne znaczenie: - Dane to surowe fakty, liczby, teksty, pomiary – same w sobie nie mówią nam wiele. Na przykład: liczba „25”, tekst „Warszawa” czy kod „12345” to dane. - Informacja to przetworzone dane, które mają znaczenie i mogą być użyteczne w podejmowaniu decyzji. Na przykład: „25 klientów w Warszawie dokonało zakupów w ciągu ostatniego tygodnia” – to informacja, bo dane zostały zorganizowane i nadano im kontekst.\nMożemy więc powiedzieć, że dane to surowy materiał, a informacja to efekt jego przetworzenia i interpretacji.\n\nBaza danych\n\nBaza danych to zorganizowany zbiór danych, który jest przechowywany i zarządzany w taki sposób, aby można było łatwo je przeszukiwać, aktualizować i analizować.\nNajważniejsze cechy bazy danych: - Strukturalność – dane są uporządkowane według określonego schematu. - Centralizacja – wszystkie dane są przechowywane w jednym miejscu i dostępne dla uprawnionych użytkowników. - Trwałość i bezpieczeństwo – dane są chronione przed utratą i nieautoryzowanym dostępem.\nPrzykłady baz danych w życiu codziennym: - Lista kontaktów w telefonie (przechowuje imię, numer, adres e-mail) - System rezerwacji w hotelu (przechowuje informacje o gościach, pokojach i dostępności) - Sklep internetowy (przechowuje produkty, zamówienia, dane klientów)\n\nSystem Zarządzania Bazą Danych (DBMS)\n\nSam zbiór danych to nie wszystko – potrzebujemy sposobu, aby nimi efektywnie zarządzać. Tu wchodzi DBMS – oprogramowanie, które pozwala na: - Tworzenie i modyfikowanie baz danych – np. dodawanie nowych tabel, kolumn, reguł integralności. - Wstawianie, aktualizowanie i usuwanie danych – bez konieczności bezpośredniej manipulacji plikami. - Wyszukiwanie i raportowanie informacji – szybkie zapytania do dużych zbiorów danych. - Zarządzanie bezpieczeństwem i uprawnieniami – kto może odczytać lub zmienić dane.\nPrzykłady popularnych DBMS: MySQL, PostgreSQL, Oracle, Microsoft SQL Server, SQLite.\nKażdy z nich implementuje standardowe funkcje, choć różnią się wydajnością, skalowalnością i dodatkowymi możliwościami.\nPodsumowanie - Dane – surowe fakty - Informacja – dane zinterpretowane i uporządkowane - Baza danych – zorganizowany zbiór danych - DBMS – oprogramowanie do zarządzania bazą danych\nZrozumienie tych pojęć pozwala nam w kolejnych wykładach przechodzić do bardziej technicznych zagadnień, takich jak projektowanie schematów czy pisanie zapytań w SQL.",
    "crumbs": [
      "Książki",
      "Wykłady",
      "Wprowadzenie do relacyjnych baz danych"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#architektura-systemów-baz-danych",
    "href": "lectures/wyklad1.html#architektura-systemów-baz-danych",
    "title": "Wprowadzenie do relacyjnych baz danych",
    "section": "Architektura systemów baz danych",
    "text": "Architektura systemów baz danych\nKiedy mamy już pojęcie o tym, czym jest baza danych i DBMS, warto zrozumieć, jak systemy baz danych są zorganizowane wewnętrznie, aby efektywnie przechowywać, przetwarzać i udostępniać dane.\n\nPoziomy abstrakcji w bazach danych\n\nSystemy baz danych stosują różne poziomy abstrakcji, aby oddzielić fizyczną reprezentację danych od tego, co widzi użytkownik. Wyróżniamy trzy główne poziom: 1. Poziom fizyczny (wewnętrzny) - Opisuje sposób przechowywania danych na dysku – struktury plików, indeksy, metody organizacji danych. - Użytkownicy rzadko wchodzą w tę warstwę, ale jest ona kluczowa dla wydajności systemu. 2. Poziom logiczny (pośredni) - Określa strukturę danych i relacje między nimi, niezależnie od sposobu przechowywania fizycznego. - Przykład: tabela „Studenci” z kolumnami „Imię”, „Nazwisko”, „NrIndeksu”. - Poziom ten umożliwia DBMS zapewnienie spójności danych i integralności bez ujawniania szczegółów fizycznych. 3. Poziom zewnętrzny (widok użytkownika) - To, co widzi konkretny użytkownik lub aplikacja. - Użytkownicy nie muszą znać całej bazy – mogą mieć dostęp tylko do wybranych tabel lub kolumn. - Przykład: wykładowca widzi tylko dane swoich studentów, a administracja widzi pełne informacje.\nDzięki podziałowi na poziomy zmiany na jednym poziomie nie wpływają bezpośrednio na inne – np. zmiana sposobu przechowywania danych na dysku nie wymaga modyfikacji zapytań użytkowników.\n\nModel ANSI/SPARC\n\nAby ujednolicić tę koncepcję, w latach 70. powstał model architektury ANSI/SPARC: - Poziom wewnętrzny – fizyczne przechowywanie danych - Poziom logiczny – schemat logiczny całej bazy danych - Poziom zewnętrzny – schematy zewnętrzne, czyli widoki użytkowników\nZalety modelu ANSI/SPARC: - Izolacja danych – zmiany w przechowywaniu danych nie wpływają na aplikacje. - Elastyczność – można tworzyć różne widoki dla różnych użytkowników. - Bezpieczeństwo i kontrola dostępu – każdy użytkownik widzi tylko dane, do których ma uprawnienia.\n\nPodsumowanie\n\n\nPoziomy abstrakcji umożliwiają oddzielenie implementacji fizycznej od sposobu używania danych.\nModel ANSI/SPARC jest klasycznym sposobem przedstawienia tej architektury, który pomaga zrozumieć działanie każdego DBMS.\nDzięki temu systemy baz danych są zarówno wydajne, jak i łatwe w użyciu dla użytkowników.",
    "crumbs": [
      "Książki",
      "Wykłady",
      "Wprowadzenie do relacyjnych baz danych"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#model-relacyjny-relacje-krotki-atrybuty-domeny",
    "href": "lectures/wyklad1.html#model-relacyjny-relacje-krotki-atrybuty-domeny",
    "title": "Wprowadzenie do relacyjnych baz danych",
    "section": "Model relacyjny: relacje, krotki, atrybuty, domeny",
    "text": "Model relacyjny: relacje, krotki, atrybuty, domeny\nGdy już rozumiemy, czym jest baza danych i jak zorganizowana jest jej architektura, możemy przejść do serca współczesnych baz danych – modelu relacyjnego, który wprowadził Edgar F. Codd w latach 70. XX wieku.\n\nCo to jest relacja?\n\n\nW modelu relacyjnym dane są przechowywane w tabelach, które nazywamy relacjami.\nKażda tabela opisuje pewien zbiór obiektów lub zdarzeń o tych samych właściwościach.\nPrzykład: tabela „Studenci” może przechowywać dane o wszystkich studentach danej uczelni.\n\n\nKrotki (wiersze)\n\n\nKrotka to pojedynczy rekord w tabeli – czyli jeden wiersz.\nKażda krotka przechowuje wartości wszystkich kolumn dla jednego obiektu lub zdarzenia.\nPrzykład: w tabeli „Studenci” krotką jest informacja: „Jan Kowalski, nr indeksu 12345, kierunek Informatyka”.\n\n\nAtrybuty (kolumny)\n\n\nAtrybut to kolumna w tabeli – opisuje jedną właściwość obiektu.\nKażda kolumna ma nazwę i określony typ danych.\nPrzykład: w tabeli „Studenci” atrybutami mogą być: „Imię”, „Nazwisko”, „NrIndeksu”, „Kierunek”.\n\n\nDomeny\n\n\nDomena to zestaw wartości, które mogą przyjmować dane w danym atrybucie.\nOkreśla typ danych (np. liczba całkowita, tekst, data) i często dodatkowe ograniczenia (np. długość tekstu, zakres liczb).\nPrzykład: atrybut „NrIndeksu” może mieć domenę „ciąg 5-cyfrowych liczb”, a „Imię” – „ciąg znaków do 50 liter”.\n\n\nSchemat i instancja relacji\n\n\nSchemat relacji opisuje strukturę tabeli – nazwy kolumn i ich typy danych.\nInstancja relacji to zbiór wszystkich krotek w danym momencie – czyli aktualna zawartość tabeli.\nPrzykład: Schemat tabeli „Studenci” to kolumny „Imię, Nazwisko, NrIndeksu, Kierunek”, a instancja to wszystkie wiersze z danymi konkretnych studentów.\n\n\nPodsumowanie\n\n\nModel relacyjny organizuje dane w tabele (relacje) składające się z wierszy (krotek) i kolumn (atrybutów).\nKażdy atrybut posiada swoją domenę, czyli zestaw dopuszczalnych wartości.\nSchemat opisuje strukturę tabeli, a instancja to jej aktualne dane.\nDzięki tej prostocie model relacyjny jest łatwy do zrozumienia, elastyczny i wydajny, co tłumaczy jego popularność w systemach baz danych.",
    "crumbs": [
      "Książki",
      "Wykłady",
      "Wprowadzenie do relacyjnych baz danych"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#klucze-i-integralność-danych",
    "href": "lectures/wyklad1.html#klucze-i-integralność-danych",
    "title": "Wprowadzenie do relacyjnych baz danych",
    "section": "Klucze i integralność danych",
    "text": "Klucze i integralność danych\nPo zrozumieniu podstaw modelu relacyjnego warto przyjrzeć się, jak zapewniamy spójność i poprawność danych w bazach danych. Klucze i reguły integralności są tutaj kluczowe.\n\nKlucz główny (Primary Key)\n\n\nKlucz główny to jeden lub kilka atrybutów, które jednoznacznie identyfikują każdą krotkę w tabeli.\nNikt nie może mieć dwóch rekordów z tym samym kluczem głównym.\nPrzykład: w tabeli „Studenci” atrybut „NrIndeksu” może być kluczem głównym, bo każdy student ma unikalny numer indeksu.\nKlucz główny nie może przyjmować wartości NULL, ponieważ każda krotka musi być jednoznacznie identyfikowalna.\n\n\nKlucz kandydujący (Candidate Key)\n\n\nKlucz kandydujący to każdy atrybut lub kombinacja atrybutów, która może potencjalnie pełnić funkcję klucza głównego.\nW tabeli może być wiele kluczy kandydujących, ale wybieramy tylko jeden jako klucz główny.\nPrzykład: w tabeli „Studenci” zarówno „NrIndeksu”, jak i np. „PESEL” mogłyby być kluczami kandydującymi, ale wybieramy jeden z nich na klucz główny.\n\n\nKlucz obcy (Foreign Key)\n\n\nKlucz obcy to atrybut w jednej tabeli, który odnosi się do klucza głównego w innej tabeli.\nPozwala łączyć tabele i zapewnia integralność referencyjną.\nPrzykład: tabela „Oceny” może mieć atrybut „NrIndeksu”, który jest kluczem obcym wskazującym na tabelę „Studenci”. Dzięki temu każda ocena jest przypisana do istniejącego studenta.\n\n\nIntegralność danych\n\n\nIntegralność encji – każda krotka w tabeli musi być jednoznacznie identyfikowalna (klucz główny).\nIntegralność referencyjna – każda wartość klucza obcego musi odpowiadać istniejącej wartości klucza głównego w tabeli powiązanej.\nDbając o integralność danych, unikamy błędów, duplikatów i nieprawidłowych powiązań.\n\n\nPodsumowanie\n\n\nKlucz główny – jednoznacznie identyfikuje wiersze w tabeli.\nKlucz kandydujący – potencjalny klucz główny.\nKlucz obcy – powiązuje tabele i zapewnia spójność danych między nimi.\nIntegralność danych – zasady, które dbają o poprawność i spójność danych w bazie.\n\nZrozumienie kluczy i reguł integralności jest fundamentem dalszego projektowania baz danych oraz pracy z SQL, ponieważ większość operacji w tabelach opiera się na relacjach i powiązaniach między danymi.",
    "crumbs": [
      "Książki",
      "Wykłady",
      "Wprowadzenie do relacyjnych baz danych"
    ]
  }
]